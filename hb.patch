diff --git src/Model/Command/AggregateRootCommandBuilder.php src/Model/Command/AggregateRootCommandBuilder.php
index d528e61..771f09e 100644
--- src/Model/Command/AggregateRootCommandBuilder.php
+++ src/Model/Command/AggregateRootCommandBuilder.php
@@ -12,8 +12,6 @@ use Shrink0r\Monatic\Success;
 
 class AggregateRootCommandBuilder extends EmbeddedEntityCommandBuilder
 {
-    protected $entity;
-
     public function __construct(AggregateRootTypeInterface $aggregate_root_type, $command_class)
     {
         parent::__construct($aggregate_root_type, $command_class);
diff --git src/Model/Command/EmbeddedEntityCommandBuilder.php src/Model/Command/EmbeddedEntityCommandBuilder.php
index 43c4b8f..7a85d9f 100644
--- src/Model/Command/EmbeddedEntityCommandBuilder.php
+++ src/Model/Command/EmbeddedEntityCommandBuilder.php
@@ -21,6 +21,8 @@ use Trellis\Runtime\Validator\Result\IncidentInterface;
 
 class EmbeddedEntityCommandBuilder extends CommandBuilder
 {
+    protected $entity;
+
     protected $entity_type;
 
     public function __construct(EntityTypeInterface $entity_type, $command_class)
@@ -32,6 +34,23 @@ class EmbeddedEntityCommandBuilder extends CommandBuilder
         $this->command_state['embedded_entity_commands'] = new EmbeddedEntityTypeCommandList;
     }
 
+    public function fromEntity(EntityInterface $entity)
+    {
+        if ($entity instanceof ProjectionInterface || $entity instanceof AggregateRootInterface) {
+            throw new RuntimeError(sprintf(
+                'Provided %s must not be a top-level/root entity(%s or %s).',
+                get_class($entity),
+                ProjectionInterface::CLASS,
+                AggregateRootInterface::CLASS
+            ));
+        }
+
+        $this->entity = $entity;
+        $this->command_state['embedded_entity_identifier'] = $entity->getIdentifier();
+        $this->command_state['@type'] = $entity->getType()->getPrefix();
+        return $this;
+    }
+
     /**
      * @return array
      */
@@ -58,12 +77,15 @@ class EmbeddedEntityCommandBuilder extends CommandBuilder
     /**
      * @return array
      */
-    protected function getEmbeddedCommands(EmbeddedEntityListAttribute $attribute, array $values)
-    {
+    protected function getEmbeddedCommands(
+        EmbeddedEntityListAttribute $attribute,
+        array $values,
+        EntityInterface $parent_entity = null
+    ) {
         $errors = [];
         $affected_identifiers = [];
         $attribute_name = $attribute->getName();
-        $embedded_entity_list = isset($this->entity) ? $this->entity->getValue($attribute_name) : new EntityList;
+        $embedded_entity_list = $parent_entity ? $parent_entity->getValue($attribute_name) : new EntityList;
         $builder_list = new CommandBuilderList;
 
         foreach ($values as $position => $embedded_values) {
@@ -104,9 +126,9 @@ class EmbeddedEntityCommandBuilder extends CommandBuilder
             if (!$affected_entity) {
                 $builder_list->push(
                     (new self($embed_type, AddEmbeddedEntityCommand::CLASS))
-                    ->withParentAttributeName($attribute_name)
-                    ->withPosition($position)
-                    ->withValues($embedded_values)
+                        ->withParentAttributeName($attribute_name)
+                        ->withPosition($position)
+                        ->withValues($embedded_values)
                 );
             } else {
                 $affected_identifiers[] = $affected_entity->getIdentifier();
@@ -117,10 +139,10 @@ class EmbeddedEntityCommandBuilder extends CommandBuilder
                 ) {
                     $builder_list->push(
                         (new self($embed_type, ModifyEmbeddedEntityCommand::CLASS))
-                        ->withParentAttributeName($attribute_name)
-                        ->withEmbeddedEntityIdentifier($affected_entity->getIdentifier())
-                        ->withPosition($position)
-                        ->withValues($modified_values)
+                            ->fromEntity($affected_entity)
+                            ->withParentAttributeName($attribute_name)
+                            ->withPosition($position)
+                            ->withValues($modified_values)
                     );
                 }
             }
@@ -152,8 +174,8 @@ class EmbeddedEntityCommandBuilder extends CommandBuilder
                     // the entity was not found in the payload so we can prepare removal
                     $builder_list->push(
                         (new self($embedded_entity->getType(), RemoveEmbeddedEntityCommand::CLASS))
-                        ->withParentAttributeName($attribute_name)
-                        ->withEmbeddedEntityIdentifier($embedded_entity->getIdentifier())
+                            ->fromEntity($embedded_entity)
+                            ->withParentAttributeName($attribute_name)
                     );
                 }
             }
@@ -194,7 +216,7 @@ class EmbeddedEntityCommandBuilder extends CommandBuilder
                      * prepare and build embedded commands on the fly and then add them to the global
                      * scope list which is validated later
                      */
-                    $result = $this->getEmbeddedCommands($attribute, $values[$attribute_name]);
+                    $result = $this->getEmbeddedCommands($attribute, $values[$attribute_name], $this->entity);
                     if ($result instanceof Success) {
                         $this->command_state['embedded_entity_commands']->addItems($result->get());
                         continue;
diff --git src/Projection/EntityType.php src/Projection/EntityType.php
index 045322b..408f9ff 100644
--- src/Projection/EntityType.php
+++ src/Projection/EntityType.php
@@ -24,16 +24,17 @@ abstract class EntityType extends BaseEntityType
      */
     public function createMirroredEntity(EntityInterface $source_entity, EntityInterface $reference_entity = null)
     {
+        // $reference_entity == $topic_option(embed)
+        // $source_entity == $topic_option(AR)
+
         // compile non-list attribute values from the reference entity if available
         if ($reference_entity) {
             foreach ($this->getAttributes() as $attribute) {
-                if (!$attribute instanceof EmbeddedEntityListAttribute) {
-                    $attribute_name = $attribute->getName();
-                    $attribute_value = $reference_entity->getValue($attribute_name);
-                    $mirrored_values[$attribute_name] = $attribute_value instanceof ObjectInterface
-                        ? $attribute_value->toArray()
-                        : $attribute_value;
-                }
+                $attribute_name = $attribute->getName();
+                $attribute_value = $reference_entity->getValue($attribute_name);
+                $mirrored_values[$attribute_name] = $attribute_value instanceof ObjectInterface
+                    ? $attribute_value->toArray()
+                    : $attribute_value;
             }
         }
 
diff --git src/Ui/Renderer/RendererService.php src/Ui/Renderer/RendererService.php
index 516f8e5..74ffdee 100644
--- src/Ui/Renderer/RendererService.php
+++ src/Ui/Renderer/RendererService.php
@@ -41,7 +41,7 @@ class RendererService implements RendererServiceInterface
             $renderer_config = new ArrayConfig([]);
         }
 
-        //return $this->createRenderer($subject, $output_format, $renderer_config);
+        return $this->createRenderer($subject, $output_format, $renderer_config);
 
         $cache_key = $this->buildCacheKeyFor($subject, $output_format, $renderer_config);
 
